name: Docekr Build & Deploy

on:
  workflow_dispatch:

jobs:
  test-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - run: touch ./src/main/resources/application.properties
      - run: echo "${{ secrets.APPLICATION }}" > ./src/main/resources/application.properties
      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: 11
          distribution: 'temurin'
          cache: 'gradle'
#
#        ### Gradle ###
#      - name: Grant execute permission for gradlew
#        run: chmod +x gradlew
#
#      - name: Cache Gradle packages
#        id: cache-npm
#        uses: actions/cache@v3
#        with:
#          path: |
#            ~/.gradle/caches
#            ~/.gradle/wrapper
#          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
#          restore-keys: |
#            ${{ runner.os }}-gradle-
#      - if: ${{ steps.cache-npm.outputs.cache-hit != 'true' }}
#        name: List the state of node modules
#        continue-on-error: true
#        run: npm list
#
#      - name: Setup and execute Gradle 'build' task
#        uses: gradle/gradle-build-action@v2
#        with:
#          arguments: clean build
#          cache-read-only: ${{ github.ref != 'refs/heads/main' && github.ref != 'refs/heads/develop' }}

      - name: Docker build
        run: |
          docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_TOKEN }}
          docker build -t spring-boot-cicd .
          docker tag spring-boot-cicd shinwonsub/spring-boot-cicd:latest
          docker push shinwonsub/spring-boot-cicd:latest


      - name: Get timestamp
        uses: gerred/actions/current-time@master
        id: current-time

      - name: Run string replace
        uses: frabert/replace-string-action@master
        id: format-time
        with:
          pattern: '[:\.]+'
          string: "${{ steps.current-time.outputs.time }}"
          replace-with: '-'
          flags: 'g'

      # Beanstalk 플러그인을 사용
      # 미리 생성해둔 IAM 인증키를 사용
      - name: Beanstalk Deploy
        uses: einaregilsson/beanstalk-deploy@v21
        with:
          aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          application_name: eb_docker_deploy
          environment_name: Ebdockerdeploy-env
          version_label: "github-action--${{ steps.format-time.outputs.replaced }}"
          region: ap-northeast-2
          deployment_package: Dockerrun.aws.json
